#include <Windows.h>
#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include <math.h>
LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
HINSTANCE g_hinst;
LPCTSTR lpszClass = TEXT("First");

double checkdistance(int x, int y, int mx, int my);
BOOL inCircle(int x, int y, int mx, int my, int size);

struct Circle
{
	int xpos, ypos;
	int size;
	BOOL TorF;
};


int WINAPI WinMain(HINSTANCE hinstance, HINSTANCE hPrevInstance, LPSTR lpszCmdParam, int nCmdShow) //h의 의미? = 핸들
{
	HWND hWnd;
	MSG Message;
	WNDCLASS WndClass;
	g_hinst = hinstance;

	WndClass.cbClsExtra = 0;
	WndClass.cbWndExtra = 0;
	WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH); //배경색
	WndClass.hCursor = LoadCursor(NULL, IDC_ARROW); //프로그램 내에서 보이는 커서
	WndClass.hIcon = LoadIcon(NULL, IDI_APPLICATION); //아이콘 
	WndClass.hInstance = hinstance; //현재 실행되고 있는 객체의 핸들
	WndClass.lpfnWndProc = WndProc; //프로시저함수의 이름 
	WndClass.lpszClassName = lpszClass; //윈도우 클래스 내용의 이름 
	WndClass.lpszMenuName = NULL; // 메뉴바 이름
	WndClass.style = CS_HREDRAW | CS_VREDRAW; //윈도우 출력 스타일
											  // 여기까지 WNDCLASS구조체의 변수들에 값을 대입

	RegisterClass(&WndClass); // 윈도우 클래스를 운영체제에 등록

	hWnd = CreateWindow(lpszClass, "Windows Program 1-1", WS_OVERLAPPEDWINDOW, 0, 0, 800, 800, NULL, (HMENU)NULL, hinstance, NULL);
	//CreateWindow(클래스 이름,타이틀 이름,윈도우 스타일, 윈도우 위치좌표x , y,윈도우 가로크기, 윈도우 세로크기, 부모 윈도우 핸들, 메뉴 핸들, 응용프로그램 인스턴스, 생성 윈도우 정보(NULL))
	ShowWindow(hWnd, nCmdShow); //윈도우의 화면 출력
	UpdateWindow(hWnd); //OS에 WM_PAINT메시지 전송
	while (GetMessage(&Message, NULL, 0, 0))
	{
		//윈도우 프로시저에서 PostQuitMessage()를 호출할때 종료됨.
		TranslateMessage(&Message);
		DispatchMessage(&Message);
	}//메시지루프를 돌림.
	return (int)Message.wParam;
}
LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam) //CALLBACK(윈도우 핸들, 처리해야 할 메시지의 값,입력장치의 값1,2)
{
	PAINTSTRUCT ps;
	HDC hdc;
	HPEN hpen, oldpen;
	HBRUSH hBrush, oldBrush;
	static char buf[20];
	srand(unsigned(time));
	static int randNum = rand() % 20;
	static Circle * cir = (Circle*)malloc(sizeof(Circle)*randNum);
	static int startX, startY;
	static int endX, endY;
	static int oldX, oldY;
	static int movecount;
	static int choice;
	static int count = 0;
	static int time = 0;
	static int a, b;
	static BOOL drag;
	switch (iMessage) //메시지의 번호
	{
	case WM_LBUTTONDOWN:
		startX = LOWORD(lParam);
		startY = HIWORD(lParam);
		drag = TRUE;
		break;
	case WM_MOUSEMOVE:
		hdc = GetDC(hWnd);
		if (drag)
		{ // 흰 바탕 
			SetROP2(hdc, R2_XORPEN); // 펜의 XOR 연산 
			SelectObject(hdc, (HPEN)GetStockObject(WHITE_PEN)); // 흰 펜

			endX = LOWORD(lParam);
			endY = HIWORD(lParam);

			MoveToEx(hdc, startX, startY, NULL); // 흰 바탕 XOR 흰 펜 = 검은색 펜
			LineTo(hdc, oldX, oldY); // 지우기 : 흰 바탕 XOR 검은 펜 = 흰 선

			MoveToEx(hdc, startX, startY, NULL);
			LineTo(hdc, endX, endY); // 그리기 : 흰 바탕 XOR 흰 펜 = 검은 선
			oldX = endX; oldY = endY; // 현 지점을 이전 지점으로 설정
		}
		ReleaseDC(hWnd, hdc);
		break;
	case WM_LBUTTONUP:
		drag = FALSE;
		a = (endX - cir[choice].xpos) / 10;
		b = (endY - cir[choice].ypos) / 10;
		SetTimer(hWnd, 2, 100, NULL);
		break;
	case WM_CREATE:
		drag = FALSE;
		for (int i = 0; i < randNum; i++)
		{
			cir[i].xpos = rand() % 800;
			cir[i].ypos = rand() % 800;
			cir[i].size = 100;
			cir[i].TorF = FALSE;
		}
		cir[0].TorF = TRUE;
		SetTimer(hWnd, 1, 500, NULL);
		break;
	case WM_TIMER:
		switch (wParam)
		{
		case 1:
			time++;
			cir[count].size -= 10;
			if (time == 10)
			{
				cir[count].TorF = FALSE;
				time = 0;
				cir[count].size = 50;
				count++;
				cir[count].TorF = TRUE;
			}
			if (randNum == count)
			{
				count = 0;
			}
			break;
		case 2:
			if (movecount == 10)
			{
				movecount = 0;
				KillTimer(hWnd, 2);
			}
			movecount++;
			cir[choice].xpos += a;
			cir[choice].ypos += b;
			break;
		}
		InvalidateRect(hWnd, NULL, TRUE);
		break;
	case WM_PAINT: //메시지의 처리
		hdc = BeginPaint(hWnd, &ps);
		wsprintf(buf, "현재카운트:%d", count);
		TextOut(hdc, 0, 0, buf, strlen(buf));
		wsprintf(buf, "원개수%d", randNum);
		TextOut(hdc, 0, 20, buf, strlen(buf));

		for (int i = 0; i < randNum; i++)
		{
			if (cir[i].TorF == TRUE) {
				hBrush = CreateSolidBrush(RGB(0, 255, 0));
				oldBrush = (HBRUSH)SelectObject(hdc, hBrush);
				hpen = CreatePen(PS_SOLID, 1, RGB(0, 0, 0));
				oldpen = (HPEN)SelectObject(hdc, hpen);
				Ellipse(hdc, cir[i].xpos - cir[i].size, cir[i].ypos - cir[i].size, cir[i].xpos + cir[i].size, cir[i].ypos + cir[i].size);
				if (inCircle(startX, startY, cir[i].xpos, cir[i].ypos, cir[i].size) == TRUE)
				{
					choice = i;
					hpen = CreatePen(PS_SOLID, 1, RGB(255, 0, 0));
					oldpen = (HPEN)SelectObject(hdc, hpen);
					Ellipse(hdc, cir[i].xpos-cir[i].size, cir[i].ypos - cir[i].size, cir[i].xpos + cir[i].size, cir[i].ypos + cir[i].size);
					DeleteObject(oldpen);
				}
				DeleteObject(oldpen);
			}
		}
		MoveToEx(hdc, startX, startY, NULL);
		LineTo(hdc, endX, endY);
		EndPaint(hWnd, &ps);
		break;
	case WM_DESTROY:
		PostQuitMessage(0);
		return 0;
	}
	return(DefWindowProc(hWnd, iMessage, wParam, lParam));
	//case에서 정의되지 않은 메시지는 커널이 처리하도록 메시지 전달
}

double checkdistance(int x, int y, int mx, int my)
{
	return sqrt((mx - x)*(mx - x) + (my - y)*(my - y));
}

BOOL inCircle(int x, int y, int mx, int my, int size)
{
	if (checkdistance(x, y, mx, my) < size)
	{
		return TRUE;
	}
	else
	{
		return FALSE;
	}
}